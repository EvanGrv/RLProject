#!/usr/bin/env python3
"""
üîß DIAGNOSTIC DES ENVIRONNEMENTS SECRETS

Script de diagnostic pour identifier et r√©soudre les probl√®mes 
avec les environnements secrets avant l'analyse.
"""

import os
import sys
import platform

def navigate_to_correct_directory():
    """Navigation automatique vers le bon r√©pertoire"""
    print("üìÅ Recherche du r√©pertoire des environnements secrets...")
    
    # Chemins possibles relatifs au r√©pertoire courant
    possible_paths = [
        '.',  # D√©j√† dans le bon r√©pertoire
        'game/secret_env',  # Depuis la racine du projet
        '../game/secret_env',  # Depuis un sous-r√©pertoire
        '../../game/secret_env',  # Depuis un sous-sous-r√©pertoire
        './game/secret_env',  # Variante explicite
    ]
    
    for path in possible_paths:
        target_file = os.path.join(path, 'secret_envs_wrapper.py')
        if os.path.exists(target_file):
            abs_path = os.path.abspath(path)
            os.chdir(abs_path)
            print(f"‚úÖ Navigation vers: {abs_path}")
            return True
    
    # Si on ne trouve pas, essayer de d√©tecter depuis le chemin absolu
    current_path = os.getcwd()
    if 'RLProject' in current_path:
        # Construire le chemin vers game/secret_env
        rlproject_index = current_path.find('RLProject')
        if rlproject_index != -1:
            rlproject_path = current_path[:rlproject_index + len('RLProject')]
            secret_env_path = os.path.join(rlproject_path, 'game', 'secret_env')
            
            if os.path.exists(os.path.join(secret_env_path, 'secret_envs_wrapper.py')):
                os.chdir(secret_env_path)
                print(f"‚úÖ Navigation vers: {secret_env_path}")
                return True
    
    print("‚ùå Impossible de localiser le r√©pertoire des environnements secrets")
    print("üí° Assurez-vous d'√™tre dans ou proche du projet RLProject")
    return False

def diagnostic_complete():
    """Effectue un diagnostic complet du syst√®me"""
    print("üîß DIAGNOSTIC DES ENVIRONNEMENTS SECRETS")
    print("=" * 50)
    
    # 1. V√©rification du syst√®me
    print("1. üñ•Ô∏è INFORMATIONS SYST√àME:")
    print(f"   OS: {platform.system()} {platform.release()}")
    print(f"   Architecture: {platform.architecture()[0]}")
    print(f"   Processeur: {platform.processor()}")
    print(f"   Python: {sys.version}")
    
    # 2. V√©rification du r√©pertoire
    print("\n2. üìÅ V√âRIFICATION DU R√âPERTOIRE:")
    current_dir = os.getcwd()
    print(f"   R√©pertoire actuel: {current_dir}")
    
    # V√©rification des fichiers essentiels
    essential_files = [
        'secret_envs_wrapper.py',
        'libs/',
        'environment_stats_analyzer.py'
    ]
    
    all_files_ok = True
    for file in essential_files:
        exists = os.path.exists(file)
        status = "‚úÖ" if exists else "‚ùå"
        print(f"   {status} {file}")
        if not exists:
            all_files_ok = False
    
    # 3. V√©rification des biblioth√®ques natives
    print("\n3. üìö V√âRIFICATION DES BIBLIOTH√àQUES NATIVES:")
    libs_dir = 'libs'
    
    if not os.path.exists(libs_dir):
        print(f"   ‚ùå R√©pertoire {libs_dir} non trouv√©")
        return False
    
    # Lister le contenu du r√©pertoire libs
    try:
        libs_content = os.listdir(libs_dir)
        print(f"   üìÇ Contenu du r√©pertoire libs: {libs_content}")
        
        # V√©rifier la DLL appropri√©e pour ce syst√®me
        system = platform.system().lower()
        if system == "windows":
            expected_lib = "secret_envs.dll"
        elif system == "linux":
            expected_lib = "libsecret_envs.so"
        elif system == "darwin":
            if "intel" in platform.processor().lower():
                expected_lib = "libsecret_envs_intel_macos.dylib"
            else:
                expected_lib = "libsecret_envs.dylib"
        else:
            print(f"   ‚ö†Ô∏è Syst√®me non support√©: {system}")
            return False
        
        lib_path = os.path.join(libs_dir, expected_lib)
        lib_exists = os.path.exists(lib_path)
        status = "‚úÖ" if lib_exists else "‚ùå"
        print(f"   {status} Biblioth√®que attendue: {expected_lib}")
        
        if lib_exists:
            # V√©rifier la taille du fichier
            file_size = os.path.getsize(lib_path)
            print(f"   üìä Taille: {file_size:,} bytes")
        else:
            all_files_ok = False
        
    except Exception as e:
        print(f"   ‚ùå Erreur lors de l'acc√®s au r√©pertoire libs: {e}")
        return False
    
    # 4. Test d'import des modules Python
    print("\n4. üêç V√âRIFICATION DES MODULES PYTHON:")
    
    modules_to_test = [
        'numpy',
        'pandas', 
        'matplotlib',
        'tqdm'
    ]
    
    for module in modules_to_test:
        try:
            __import__(module)
            print(f"   ‚úÖ {module}")
        except ImportError:
            print(f"   ‚ùå {module} - Module manquant")
            all_files_ok = False
    
    # 5. Test d'importation des environnements
    print("\n5. üéÆ TEST D'IMPORTATION DES ENVIRONNEMENTS:")
    
    try:
        from secret_envs_wrapper import SecretEnv0, SecretEnv1, SecretEnv2, SecretEnv3
        print("   ‚úÖ Import des wrappers r√©ussi")
        
        # Test de cr√©ation d'un environnement
        envs_to_test = [
            ('SecretEnv0', SecretEnv0),
            ('SecretEnv1', SecretEnv1),
            ('SecretEnv2', SecretEnv2),
            ('SecretEnv3', SecretEnv3)
        ]
        
        for env_name, env_class in envs_to_test:
            try:
                env = env_class()
                print(f"   ‚úÖ {env_name} - Cr√©ation r√©ussie")
                
                # Test des m√©thodes de base
                num_states = env.num_states()
                num_actions = env.num_actions()
                print(f"      üìä √âtats: {num_states}, Actions: {num_actions}")
                
            except Exception as e:
                print(f"   ‚ùå {env_name} - Erreur: {e}")
                all_files_ok = False
                
    except Exception as e:
        print(f"   ‚ùå Erreur d'import: {e}")
        all_files_ok = False
    
    # 6. R√©sum√© et recommandations
    print("\n6. üìã R√âSUM√â ET RECOMMANDATIONS:")
    
    if all_files_ok:
        print("   üéâ Tous les tests sont pass√©s avec succ√®s!")
        print("   ‚úÖ Vous pouvez lancer l'analyse compl√®te avec: python run_analysis.py")
    else:
        print("   ‚ö†Ô∏è Des probl√®mes ont √©t√© d√©tect√©s:")
        
        # Recommandations bas√©es sur les erreurs
        if not os.path.exists('secret_envs_wrapper.py'):
            print("   üí° Naviguez vers le r√©pertoire game/secret_env/")
            print("      cd game/secret_env")
        
        if not os.path.exists(libs_dir):
            print("   üí° Le r√©pertoire libs/ est manquant")
            print("      V√©rifiez que vous avez tous les fichiers du projet")
        
        if 'lib_exists' in locals() and not lib_exists:
            print(f"   üí° La biblioth√®que {expected_lib} est manquante")
            print("      V√©rifiez que vous avez la bonne version pour votre OS")
    
    return all_files_ok

def fix_directory():
    """Essaie de corriger le r√©pertoire de travail (legacy function)"""
    return navigate_to_correct_directory()

def main():
    """Fonction principale du diagnostic"""
    print("üîß DIAGNOSTIC AUTOMATIQUE DES ENVIRONNEMENTS SECRETS")
    print("=" * 60)
    
    # Navigation automatique vers le bon r√©pertoire
    if not navigate_to_correct_directory():
        print("\n‚ùå Impossible de localiser les fichiers n√©cessaires")
        print("üí° Solutions possibles:")
        print("   1. Naviguez manuellement: cd game/secret_env")
        print("   2. Lancez depuis le r√©pertoire RLProject")
        print("   3. V√©rifiez que le projet est complet")
        return
    
    # Lancer le diagnostic complet
    success = diagnostic_complete()
    
    print("\n" + "=" * 50)
    if success:
        print("‚úÖ DIAGNOSTIC TERMIN√â: SYST√àME PR√äT")
        print("üöÄ Vous pouvez maintenant lancer:")
        print("   python run_analysis.py")
        print("   ou")
        print("   python quick_demo.py")
    else:
        print("‚ùå DIAGNOSTIC TERMIN√â: PROBL√àMES D√âTECT√âS")
        print("üîß Suivez les recommandations ci-dessus")
    print("=" * 50)

if __name__ == "__main__":
    main() 